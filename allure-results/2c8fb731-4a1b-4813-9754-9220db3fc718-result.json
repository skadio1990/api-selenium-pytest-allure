{"name": "Assert 90min header menu", "status": "failed", "statusDetails": {"message": "AssertionError: Failed assertions:\nTransfers\nFanVoice\nThe Switch\nEFL\nLa Liga\nSerie A", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"72a1675428d53b1fd7b0d33682169c7a\")>\n\n    @allure.parent_suite(\"Minute Media\")\n    @allure.suite(\"Tests for GUI features\")\n    @allure.title(\"Assert 90min header menu\")\n    @allure.description(\"Open 90min and assert the links visible\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"Denis Krasilnikov\")\n    def test_90min_menu(browser):\n        browser.get(\"https://www.90min.com\")\n    \n        allure.attach(\n            browser.get_screenshot_as_png(),\n            name=\"Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n    \n        # Define expected menu items\n        expected_menu_items = [\n            \"Premier League\",\n            \"Transfers\",\n            \"Champions League\",\n            \"FanVoice\",\n            \"The Switch\",\n            \"EFL\",\n            \"La Liga\",\n            \"Serie A\",\n            \"More\",\n        ]\n    \n        # Find all header elements with class name \"li_8cxs15\"\n        elements = browser.find_elements(By.CLASS_NAME, \"li_8cxs15\")\n    \n        # Extract text from each element and store in array\n        actual_menu_items = [element.text for element in elements]\n    \n        # Loop over actual menu items and assert vs expected array\n        failed_assertions = []\n    \n        for expected_item in expected_menu_items:\n            try:\n                with allure.step(f\"Assert {expected_item}\"):\n                    assert expected_item in actual_menu_items, \\\n                        f\"Assert menu item: {expected_item}\"\n            except AssertionError as e:\n                failed_assertions.append(expected_item)\n    \n        # Raise an exception if there are failed assertions\n        if failed_assertions:\n>           raise AssertionError(\"Failed assertions:\\n\"\n                                + \"\\n\".join(failed_assertions))\nE           AssertionError: Failed assertions:\nE           Transfers\nE           FanVoice\nE           The Switch\nE           EFL\nE           La Liga\nE           Serie A\n\ntest_gui.py:71: AssertionError"}, "description": "Open 90min and assert the links visible", "steps": [{"name": "Assert Premier League", "status": "passed", "start": 1702331608607, "stop": 1702331608607}, {"name": "Assert Transfers", "status": "failed", "statusDetails": {"message": "AssertionError: Assert menu item: Transfers\nassert 'Transfers' in ['News', 'Transfer News', 'Premier League', 'European Leagues', 'Champions League', 'Women', ...]\n", "trace": "  File \"/Users/skadio/selenium-pytest-allure/test_gui.py\", line 64, in test_90min_menu\n    assert expected_item in actual_menu_items, \\\n"}, "start": 1702331608607, "stop": 1702331608607}, {"name": "Assert Champions League", "status": "passed", "start": 1702331608607, "stop": 1702331608607}, {"name": "Assert FanVoice", "status": "failed", "statusDetails": {"message": "AssertionError: Assert menu item: FanVoice\nassert 'FanVoice' in ['News', 'Transfer News', 'Premier League', 'European Leagues', 'Champions League', 'Women', ...]\n", "trace": "  File \"/Users/skadio/selenium-pytest-allure/test_gui.py\", line 64, in test_90min_menu\n    assert expected_item in actual_menu_items, \\\n"}, "start": 1702331608607, "stop": 1702331608607}, {"name": "Assert The Switch", "status": "failed", "statusDetails": {"message": "AssertionError: Assert menu item: The Switch\nassert 'The Switch' in ['News', 'Transfer News', 'Premier League', 'European Leagues', 'Champions League', 'Women', ...]\n", "trace": "  File \"/Users/skadio/selenium-pytest-allure/test_gui.py\", line 64, in test_90min_menu\n    assert expected_item in actual_menu_items, \\\n"}, "start": 1702331608607, "stop": 1702331608607}, {"name": "Assert EFL", "status": "failed", "statusDetails": {"message": "AssertionError: Assert menu item: EFL\nassert 'EFL' in ['News', 'Transfer News', 'Premier League', 'European Leagues', 'Champions League', 'Women', ...]\n", "trace": "  File \"/Users/skadio/selenium-pytest-allure/test_gui.py\", line 64, in test_90min_menu\n    assert expected_item in actual_menu_items, \\\n"}, "start": 1702331608608, "stop": 1702331608608}, {"name": "Assert La Liga", "status": "failed", "statusDetails": {"message": "AssertionError: Assert menu item: La Liga\nassert 'La Liga' in ['News', 'Transfer News', 'Premier League', 'European Leagues', 'Champions League', 'Women', ...]\n", "trace": "  File \"/Users/skadio/selenium-pytest-allure/test_gui.py\", line 64, in test_90min_menu\n    assert expected_item in actual_menu_items, \\\n"}, "start": 1702331608608, "stop": 1702331608608}, {"name": "Assert Serie A", "status": "failed", "statusDetails": {"message": "AssertionError: Assert menu item: Serie A\nassert 'Serie A' in ['News', 'Transfer News', 'Premier League', 'European Leagues', 'Champions League', 'Women', ...]\n", "trace": "  File \"/Users/skadio/selenium-pytest-allure/test_gui.py\", line 64, in test_90min_menu\n    assert expected_item in actual_menu_items, \\\n"}, "start": 1702331608608, "stop": 1702331608608}, {"name": "Assert More", "status": "passed", "start": 1702331608608, "stop": 1702331608608}], "attachments": [{"name": "Screenshot", "source": "70ed6007-d662-41d2-a4b6-0580a5afac12-attachment.png", "type": "image/png"}], "start": 1702331606867, "stop": 1702331608608, "uuid": "8f039401-00f0-465a-a7a9-5a17ee26f573", "historyId": "b9c209188480f78971740a8cfd1b3f3d", "testCaseId": "b9c209188480f78971740a8cfd1b3f3d", "fullName": "test_gui#test_90min_menu", "labels": [{"name": "severity", "value": "critical"}, {"name": "suite", "value": "Tests for GUI features"}, {"name": "parentSuite", "value": "Minute Media"}, {"name": "owner", "value": "Denis Krasilnikov"}, {"name": "host", "value": "Deniss-Mac-mini.lan"}, {"name": "thread", "value": "48219-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_gui"}]}